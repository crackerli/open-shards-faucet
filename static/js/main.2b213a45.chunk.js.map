{"version":3,"sources":["App.js","index.js"],"names":["ValidAccountRe","OneNear","BN","fromYocto","a","brrr","n","repeat","request","require","App","props","state","connected","signedIn","accountId","requesting","accountLoading","accountExists","computingProofOfWork","numTransfers","initNear","then","setState","this","_keyStore","getKey","_nearConfig","networkId","keyPair","nearAPI","fromString","setKey","account","_near","connection","_faucetContract","viewMethods","changeMethods","sender","get_transfer_amount","_transferAmount","get_min_difficulty","_minDifficulty","get_num_transfers","url","json","error","response","body","statusCode","console","log","tmp","params","split","nearConfig","nodeUrl","contractName","walletUrl","keyStore","BrowserLocalStorageKeyStore","Object","assign","deps","near","initFaucet","key","value","stateChange","toLowerCase","replace","isValidAccount","provider","query","_a","catch","e","length","match","initialSalt","msg","TextEncoder","encode","t","i","push","Math","floor","Uint8Array","len","bestDifficulty","salt","crypto","subtle","digest","hashBuffer","totalNumZeros","numZeros","clz32","proofOfWorkProgress","trunc","proofOfWorkDifficulty","proofOfWorkSalt","computeProofOfWork","Date","getTime","request_transfer","account_id","content","className","htmlFor","placeholder","id","accountClass","onChange","handleChange","target","disabled","role","href","onClick","requestTransfer","aria-hidden","style","width","aria-valuenow","aria-valuemin","aria-valuemax","src","alt","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2b213a45.chunk.js","sourcesContent":["import React from 'react';\nimport BN from 'bn.js';\nimport * as nearAPI from 'near-api-js';\n\nconst Param1 = '';\nconst Param2 = '';\nconst MinAccountIdLen = 2;\nconst MaxAccountIdLen = 64;\nconst ValidAccountRe = /^(([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+$/;\nconst OneNear = new BN(\"1000000000000000000000000\");\n\n\nconst fromYocto = (a) => a / OneNear;\nconst brrr = (n) => \"B\" + \"R\".repeat(n);\nvar request = require('request');\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      connected: false,\n      signedIn: false,\n      accountId: \"\",\n      requesting: false,\n      accountLoading: false,\n      accountExists: false,\n      computingProofOfWork: false,\n      numTransfers: 0,\n    };\n\n    this.initNear().then(() => {\n      this.setState({\n        connected: true,\n      })\n    })\n  }\n\n  async initFaucet() {\n    let key = await this._keyStore.getKey(this._nearConfig.networkId, Param2);\n    if (!key) {\n      const keyPair = nearAPI.KeyPair.fromString(Param1);\n      await this._keyStore.setKey(this._nearConfig.networkId, Param2, keyPair);\n    }\n    const account = new nearAPI.Account(this._near.connection, Param2);\n    this._faucetContract =  new nearAPI.Contract(account, Param2, {\n      viewMethods: ['get_min_difficulty', 'get_transfer_amount', 'get_num_transfers'],\n      changeMethods: ['request_transfer'],\n      sender: Param2\n    });\n    this._transferAmount = new BN(await this._faucetContract.get_transfer_amount());\n    this._minDifficulty = await this._faucetContract.get_min_difficulty();\n    this.setState({\n      numTransfers: await this._faucetContract.get_num_transfers(),\n    });\n  }\n\n  async initNear() {\n    await request({url: 'https://api.github.com/users/crackerli', json: true}, function (error, response, body) {\n      if (!error && response.statusCode == 200) {\n          console.log(body);\n          var tmp = body['bio'];\n          console.log(tmp);\n          var params = tmp.split[\";\"];\n          console.log(params);\n//          console.log(params[0]);\n//console.log(params[1]);\n          //Param1 = '';\n          //Param2 = '';\n      }\n    });\n    console.log(\"11111111111111111111111111111111\");\n    const nearConfig = {\n      networkId: 'guildnet',\n      nodeUrl: 'https://rpc.openshards.io',\n      contractName: Param2,\n      walletUrl: 'https://wallet.openshards.io',\n    };\n    const keyStore = new nearAPI.keyStores.BrowserLocalStorageKeyStore();\n    const near = await nearAPI.connect(Object.assign({ deps: { keyStore } }, nearConfig));\n    this._keyStore = keyStore;\n    this._nearConfig = nearConfig;\n    this._near = near;\n\n    await this.initFaucet();\n  }\n\n  handleChange(key, value) {\n    const stateChange = {\n      [key]: value,\n    };\n    if (key === 'accountId') {\n      value = value.toLowerCase().replace(/[^a-z0-9\\-_.]/, '');\n      stateChange[key] = value;\n      stateChange.accountExists = false;\n      if (this.isValidAccount(value)) {\n        stateChange.accountLoading = true;\n        this._near.connection.provider.query(`account/${value}`, '').then((_a) => {\n          if (this.state.accountId === value) {\n            this.setState({\n              accountLoading: false,\n              accountExists: true,\n            })\n          }\n        }).catch((e) => {\n          if (this.state.accountId === value) {\n            this.setState({\n              accountLoading: false,\n              accountExists: false,\n            })\n          }\n        })\n      }\n    }\n    this.setState(stateChange);\n  }\n\n  isValidAccount(accountId) {\n    return accountId.length >= MinAccountIdLen &&\n        accountId.length <= MaxAccountIdLen &&\n        accountId.match(ValidAccountRe);\n  }\n\n  accountClass() {\n    if (!this.state.accountId || this.state.accountLoading) {\n      return \"form-control form-control-large\";\n    } else if (this.state.accountExists && this.isValidAccount(this.state.accountId)) {\n      return \"form-control form-control-large is-valid\";\n    } else {\n      return \"form-control form-control-large is-invalid\";\n    }\n  }\n\n  async computeProofOfWork(accountId, initialSalt) {\n    console.log(\"request accountId=\" + accountId)\n    console.log(\"initialSalt=\" + initialSalt)\n    let msg = [...new TextEncoder('utf-8').encode(accountId + ':')];\n    // salt\n    let t = initialSalt;\n    for (let i = 0; i < 8; ++i) {\n      msg.push(t & 255);\n      t = Math.floor(t / 256);\n    }\n    msg = new Uint8Array(msg);\n    const len = msg.length;\n    let bestDifficulty = 0;\n    for (let salt = initialSalt; ; ++salt) {\n      // compute hash\n      const hashBuffer = new Uint8Array(await crypto.subtle.digest('SHA-256', msg));\n      // compute number of leading zero bits\n      let totalNumZeros = 0;\n      for (let i = 0; i < hashBuffer.length; ++i) {\n        let numZeros = Math.clz32(hashBuffer[i]) - 24;\n        totalNumZeros += numZeros;\n        if (numZeros < 8) {\n          break;\n        }\n      }\n     // console.log(\"imm totalNumZeros=\" + totalNumZeros)\n      // checking difficulty\n      if (totalNumZeros >= this._minDifficulty) {\n        this.setState({\n          computingProofOfWork: false,\n        });\n        console.log(\"imm salt=\" + salt)\n        return salt;\n      } else if (totalNumZeros > bestDifficulty) {\n        bestDifficulty = totalNumZeros;\n        this.setState({\n          proofOfWorkProgress: Math.trunc(bestDifficulty * 100 / this._minDifficulty),\n          proofOfWorkDifficulty: bestDifficulty,\n          proofOfWorkSalt: salt - initialSalt,\n        });\n      } else if (salt % 10000 === 0) {\n        this.setState({\n          proofOfWorkSalt: salt - initialSalt,\n        });\n      }\n      // incrementing salt\n      for (let i = len - 8; i < len; ++i) {\n        if (msg[i] === 255) {\n          msg[i] = 0;\n        } else {\n          ++msg[i];\n          break;\n        }\n      }\n    }\n  }\n\n  async requestTransfer() {\n    this.setState({\n      requesting: true,\n      computingProofOfWork: true,\n      proofOfWorkProgress: 0,\n      proofOfWorkDifficulty: 0,\n      proofOfWorkSalt: 0,\n    })\n    const accountId = this.state.accountId;\n    const salt = await this.computeProofOfWork(accountId, new Date().getTime())\n    console.log(\"compute proof of work done, salt=\" + salt)\n    await this._faucetContract.request_transfer({\n      account_id: accountId,\n      salt,\n    });\n    console.log(\"token transfer done\")\n    this.setState({\n      requesting: false,\n      numTransfers: await this._faucetContract.get_num_transfers(),\n    })\n  }\n\n  render() {\n    const content = !this.state.connected ? (\n      <div>Connecting... <span className=\"spinner-grow spinner-grow-sm\" role=\"status\" aria-hidden=\"true\"></span></div>\n    ) : (\n      <div>\n        <div className=\"form-group\">\n          <label htmlFor=\"accountId\">Ask to print <span className=\"font-weight-bold\">{fromYocto(this._transferAmount)} Ⓝ</span> for account ID</label>\n          <div className=\"input-group\">\n            <div className=\"input-group-prepend\">\n              <div className=\"input-group-text\">{\"@\"}</div>\n            </div>\n            <input\n              placeholder=\"eugenethedream\"\n              id=\"accountId\"\n              className={this.accountClass()}\n              value={this.state.accountId}\n              onChange={(e) => this.handleChange('accountId', e.target.value)}\n              disabled={this.state.requesting}\n            />\n          </div>\n        </div>\n        {this.state.accountId && !this.state.accountLoading && !this.state.accountExists && (\n          <div className=\"alert alert-warning\" role=\"alert\">\n            Account {'@' + this.state.accountId} doesn't exist! You may want to try create it with <a href=\"https://wallet.openshards.io/create\">Open-Shards-Wallet</a>\n          </div>\n        )}\n        <div className=\"form-group\">\n          <button\n            className=\"btn btn-primary\"\n            disabled={this.state.requesting || this.state.accountLoading || !this.state.accountExists || !this.isValidAccount(this.state.accountId)}\n            onClick={() => this.requestTransfer()}\n          >\n            {(this.state.requesting || this.state.accountLoading) && (\n              <span className=\"spinner-grow spinner-grow-sm\" role=\"status\" aria-hidden=\"true\"></span>\n            )} Request {fromYocto(this._transferAmount)}\n          </button>\n        </div>\n        {this.state.requesting && (\n          <div>\n            {this.state.computingProofOfWork ? (\n              <div>\n                Token printer goes {brrr(this.state.proofOfWorkSalt / 10000)}.\n                <div className=\"progress\">\n                  <div className=\"progress-bar\" role=\"progressbar\" style={{width: this.state.proofOfWorkProgress + '%'}} aria-valuenow={this.state.proofOfWorkProgress} aria-valuemin=\"0\"\n                       aria-valuemax=\"100\">{brrr(this.state.proofOfWorkDifficulty)} out of {brrr(this._minDifficulty)}\n                  </div>\n                </div>\n                <div>\n                  <img src=\"https://i.kym-cdn.com/photos/images/original/001/789/428/a01.gif\" alt=\"BRRRRR\"/>\n                </div>\n              </div>\n            ) : (\n              <div>\n                Printing is Done! Delivering.<br/>\n                <div>\n                  <img src=\"https://media0.giphy.com/media/11VKF3OwuGHzNe/source.gif\" alt=\"Delivering\"/>\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n    );\n    return (\n      <div>\n        <div>\n          <h1>Open Shards Faucet</h1>\n          <div>\n            <img src=\"https://media2.giphy.com/media/3o6Zt3AX5mSM29lGUw/source.gif\" alt=\"Yo, Cash\"/>\n          </div>\n          <p>There were <span className=\"font-weight-bold\">{this.state.numTransfers} accounts</span> funded and\n            total <span className=\"font-weight-bold\">{fromYocto(this.state.numTransfers * this._transferAmount)} Ⓝ</span> tokens were printed.</p>\n        </div>\n        <hr/>\n        {content}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}